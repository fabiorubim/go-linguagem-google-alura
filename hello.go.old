package main

import (
	"fmt"
	"reflect"
)

func main() {
	//Go infere o tipo //var nome = "Fabio"
	var nome string = "Fabio"
	var versao float32 = 1.1
	var idade int = 35
	//Posso declaram variável sem o VAR e utilizando o operador :=
	endereco := "Rua das Araras"
	//var endereco string //variáveis não utilizadas Go não deixa compilar
	fmt.Println("Olá, sr.", nome, "sua idade é", idade)
	fmt.Println("Este programa está na versão", versao)
	fmt.Println("O tipo da variável nome é:", reflect.TypeOf(nome))
	fmt.Println("O tipo da variável idade é:", reflect.TypeOf(idade))
	fmt.Println("O tipo da variável versao é:", reflect.TypeOf(versao))
	fmt.Println("O endereço é:", endereco)

	fmt.Println("1- Iniciar monitoramento")
	fmt.Println("2- Exibir os Logs")
	fmt.Println("0- Sair do programa")

	var comando int
	//fmt.Scanf("%d", &comando)
	//Faz o mesmo que o Scanf, mas não é necessário informar o tipo de dados lido, Go vai inferir
	fmt.Scan(&comando) //Se colcoar algo diferente de um número inteiro, comando irá valer zero, que é seu valor padrão....ou seja, scan irá descatar o valor.
	fmt.Println("O comando escolhido foi:", comando)
	fmt.Println("Endereço da variável/ponteiro comando é:", &comando)

	// if comando == 1 {
	// 	fmt.Println("Monitorando...")
	// } else if comando == 2 {
	// 	fmt.Println("Exibindo Logs")
	// } else if comando == 0 {
	// 	fmt.Println("Saindo do programa...")
	// } else {
	// 	fmt.Println("Não conheço este comando!")
	// }

	switch comando {
	case 1:
		fmt.Println("Monitorando...")
		//break não é obrigatório, Go vai parar aqui mesmo se não houver break
	case 2:
		fmt.Println("Exibindo Logs")
	case 0:
		fmt.Println("Saindo do programa...")
	default:
		fmt.Println("Não conheço este comando!")
	}

	nome, idade := devolveNomeEIdade()
	fmt.Println(nome, "e tenho ", idade, "anos")
}

//Funão que retorna mais de um valor. O underline serve para desconsiderar o um dos retornos.
func devolveNomeEIdade() (string, int) {
	nome := "Fabio"
	idade := 35
	return nome, idade
}

func exibeNomesSlice() {
	//Slices infere o tamanho a partir da quantidade de itens atribuídos a ele.
	//Todo Slice é um array
	nomes := []string{"Fabio", "Marina", "Bernado"}
	fmt.Println(nomes)
	fmt.Println("Slice tipo: ", reflect.typeof(nomes)) //Mostra um array vazio, mesmo com os itens iniciados.
	fmt.Prinln("Tamanho do meu Slice:", len(nomes) );
	nomes = append(nomes, "Rubim")
	fmt.Prinln("Tamanho do meu Slice:", len(nomes) );
	fmt.Prinln("Capacidade do meu Slice:", cap(nomes) ); //A capacidade dobra... fica com o tamanho anterior ao APPEND "vezes" 2


}

func exibeNomesArray() {
	nomes := [3]string{"Fabio", "Marina", "Bernado"}
	fmt.Println(nomes)
	fmt.Println("Array tipo: ", reflect.typeof(nomes))//Mostra um array com 4 itens.
}